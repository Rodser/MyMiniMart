//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Configs/InputPlayerSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputPlayerSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputPlayerSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputPlayerSystem"",
    ""maps"": [
        {
            ""name"": ""MoverActionMap"",
            ""id"": ""0435280a-4814-4090-a735-60260823d8da"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4e3fbf47-4ee6-45dc-bf3a-51900f3e17f8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2,InvertVector2"",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector Touch"",
                    ""id"": ""6c2c8c62-1538-4730-94ae-9a87e136f224"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""551fae39-37f9-45c9-b856-0f3fba45a198"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchAndroid"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""cd73e190-386c-499b-ae34-f34ed03257b1"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchAndroid"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""296c469f-8923-479f-b8ee-220bc3f19c09"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""68ec8952-186e-48a8-b59f-4e810a435464"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""TouchAndroid"",
            ""bindingGroup"": ""TouchAndroid"",
            ""devices"": []
        }
    ]
}");
        // MoverActionMap
        m_MoverActionMap = asset.FindActionMap("MoverActionMap", throwIfNotFound: true);
        m_MoverActionMap_Move = m_MoverActionMap.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoverActionMap
    private readonly InputActionMap m_MoverActionMap;
    private List<IMoverActionMapActions> m_MoverActionMapActionsCallbackInterfaces = new List<IMoverActionMapActions>();
    private readonly InputAction m_MoverActionMap_Move;
    public struct MoverActionMapActions
    {
        private @InputPlayerSystem m_Wrapper;
        public MoverActionMapActions(@InputPlayerSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MoverActionMap_Move;
        public InputActionMap Get() { return m_Wrapper.m_MoverActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoverActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IMoverActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MoverActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoverActionMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMoverActionMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMoverActionMapActions instance)
        {
            if (m_Wrapper.m_MoverActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoverActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MoverActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoverActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoverActionMapActions @MoverActionMap => new MoverActionMapActions(this);
    private int m_TouchAndroidSchemeIndex = -1;
    public InputControlScheme TouchAndroidScheme
    {
        get
        {
            if (m_TouchAndroidSchemeIndex == -1) m_TouchAndroidSchemeIndex = asset.FindControlSchemeIndex("TouchAndroid");
            return asset.controlSchemes[m_TouchAndroidSchemeIndex];
        }
    }
    public interface IMoverActionMapActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
